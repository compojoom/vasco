<?xml version="1.0" encoding="UTF-8"?>
<!--
        Vasco build file for Phing
        written by Daniel Dimitrov - https://compojoom.com
        
        Run "phing"
        from the build directory to build the component, modules and plugins
-->

<project name="pkg_vasco" default="buildZip">
	<property file="./build.properties"/>

	<taskdef name="extfile" classname="phingext.listJPackageFilesTask" classpath="../../buildtools"/>
	<taskdef name="gitversion" classname="phingext.GitVersionTask" classpath="../../buildtools"/>
	<taskdef name="explode" classname="phingext.explodeTask" classpath="../../buildtools"/>

	<import file="../../buildtools/helper.xml" optional="true"/>
	<import file="../../buildtools/plugin.xml" optional="true"/>
	<import file="../../buildtools/module.xml" optional="true"/>

	<property name="dirs.root" value="${project.basedir}/../"/>
	<property name="dirs.source" value="${dirs.root}source"/>

	<tstamp>
		<format property="build.date" pattern="%Y-%m-%d"/>
	</tstamp>

	<if>
		<equals arg1="${build.version}" arg2="dev"/>
		<then>
			<gitversion workingCopy="${dirs.root}" propertyName="git.lastrevision"/>
			<property name="build.version" value="git_${git.lastrevision}" override="true"/>
		</then>
	</if>

	<target name="setup-properties">
		<!-- Initialize the version if it's not set -->
		<property name="destination.dir"
		          value="${dirs.root}packages/package/pkg_${package.name}/pkg_${package.name}-${build.version}"/>
		<property name="destination.base.dir" value="${destination.dir}"/>

		<mkdir dir="${destination.dir}"/>
		<available file="${dirs.source}\administrator\language"
		           type="dir" property="adminLang.exist" value="yes"/>

	</target>

	<filterchain id="standard-tokens-core">
		<replacetokens begintoken="@@" endtoken="@@">
			<token key="DATE" value="${build.date}"/>
			<token key="VERSION" value="${build.version}"/>
		</replacetokens>
	</filterchain>

	<target name="buildZip" depends="setup-properties, buildPackage">
		<echo msg="buildZip"/>

		<zip destfile="${destination.dir}/../pkg_${package.name}-${build.version}.zip"
		     basedir="${destination.dir}/../pkg_${package.name}-${build.version}"/>
	</target>

	<target name="build-package">
		<if>
			<isset property="plugins"/>
			<then>
				<property name="destination.dir" value="${destination.base.dir}" override="true"/>
				<foreach list="${plugins}" param="plugin" target="buildPluginZip"/>
				<property name="destination.dir" value="${destination.base.dir}" override="true"/>
			</then>
		</if>

		<!-- Make the modules -->
		<if>
			<isset property="modules_admin"/>
			<then>
				<property name="destination.dir" value="${destination.base.dir}" override="true"/>
				<foreach list="${modules_admin}" param="module_admin" target="buildModuleZip"/>
				<property name="destination.dir" value="${destination.base.dir}" override="true"/>
			</then>
		</if>

		<if>
			<isset property="modules"/>
			<then>
				<property name="destination.dir" value="${destination.base.dir}" override="true"/>
				<foreach list="${modules}" param="module" target="buildModuleZip"/>
				<property name="destination.dir" value="${destination.base.dir}" override="true"/>
			</then>
		</if>

		<delete dir="${destination.dir}/administrator" />
		<delete dir="${destination.dir}/modules" />
		<delete dir="${destination.dir}/plugins" />

		<copy file="${dirs.root}/builds/templates/pkg_${package.name}.xml"
		      tofile="${destination.dir}/pkg_${package.name}.xml" overwrite="true">
			<filterchain refid="standard-tokens-core"/>
		</copy>
	</target>

	<target name="buildPackage"
	        depends="setup-properties, build-package" />

	<target name="dev-release" description="Makes everything except the documentation"
	        depends="buildZip, ftpdeploy">
	</target>

	<target name="ftpdeploy" depends="setup-properties">
		<gitversion workingCopy="${dirs.root}" propertyName="git.lastrevision"/>
		<!-- Core release -->
		<echo>Uploading release to dev folder</echo>
		<ftpdeploy
				host="${ftp.host}"
				port="${ftp.port}"
				username="${ftp.username}"
				password="${ftp.password}"
				dir="${ftp.dir}/mydigipass/git${git.lastrevision}"
				mode="${ftp.mode}"
				level="debug">
			<fileset dir="${dirs.root}">
				<include name="CHANGELOG"/>
			</fileset>
			<fileset dir="${destination.dir}/../">
				<include name="pkg_${package.name}-git_${git.lastrevision}.zip"/>
			</fileset>
		</ftpdeploy>
	</target>
</project>